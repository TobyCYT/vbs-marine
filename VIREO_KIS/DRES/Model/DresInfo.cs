/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// DresInfo
    /// </summary>
    [DataContract]
        public partial class DresInfo :  IEquatable<DresInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DresInfo" /> class.
        /// </summary>
        /// <param name="version">version (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="uptime">uptime (required).</param>
        /// <param name="os">os.</param>
        /// <param name="jvm">jvm.</param>
        /// <param name="args">args.</param>
        /// <param name="cores">cores.</param>
        /// <param name="freeMemory">freeMemory.</param>
        /// <param name="totalMemory">totalMemory.</param>
        /// <param name="load">load.</param>
        /// <param name="availableSeverThreads">availableSeverThreads.</param>
        public DresInfo(string version = default(string), long? startTime = default(long?), long? uptime = default(long?), string os = default(string), string jvm = default(string), string args = default(string), int? cores = default(int?), long? freeMemory = default(long?), long? totalMemory = default(long?), double? load = default(double?), int? availableSeverThreads = default(int?))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for DresInfo and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for DresInfo and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "uptime" is required (not null)
            if (uptime == null)
            {
                throw new InvalidDataException("uptime is a required property for DresInfo and cannot be null");
            }
            else
            {
                this.Uptime = uptime;
            }
            this.Os = os;
            this.Jvm = jvm;
            this.Args = args;
            this.Cores = cores;
            this.FreeMemory = freeMemory;
            this.TotalMemory = totalMemory;
            this.Load = load;
            this.AvailableSeverThreads = availableSeverThreads;
        }
        
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Uptime
        /// </summary>
        [DataMember(Name="uptime", EmitDefaultValue=false)]
        public long? Uptime { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Gets or Sets Jvm
        /// </summary>
        [DataMember(Name="jvm", EmitDefaultValue=false)]
        public string Jvm { get; set; }

        /// <summary>
        /// Gets or Sets Args
        /// </summary>
        [DataMember(Name="args", EmitDefaultValue=false)]
        public string Args { get; set; }

        /// <summary>
        /// Gets or Sets Cores
        /// </summary>
        [DataMember(Name="cores", EmitDefaultValue=false)]
        public int? Cores { get; set; }

        /// <summary>
        /// Gets or Sets FreeMemory
        /// </summary>
        [DataMember(Name="freeMemory", EmitDefaultValue=false)]
        public long? FreeMemory { get; set; }

        /// <summary>
        /// Gets or Sets TotalMemory
        /// </summary>
        [DataMember(Name="totalMemory", EmitDefaultValue=false)]
        public long? TotalMemory { get; set; }

        /// <summary>
        /// Gets or Sets Load
        /// </summary>
        [DataMember(Name="load", EmitDefaultValue=false)]
        public double? Load { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSeverThreads
        /// </summary>
        [DataMember(Name="availableSeverThreads", EmitDefaultValue=false)]
        public int? AvailableSeverThreads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DresInfo {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Jvm: ").Append(Jvm).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Cores: ").Append(Cores).Append("\n");
            sb.Append("  FreeMemory: ").Append(FreeMemory).Append("\n");
            sb.Append("  TotalMemory: ").Append(TotalMemory).Append("\n");
            sb.Append("  Load: ").Append(Load).Append("\n");
            sb.Append("  AvailableSeverThreads: ").Append(AvailableSeverThreads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DresInfo);
        }

        /// <summary>
        /// Returns true if DresInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DresInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DresInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Uptime == input.Uptime ||
                    (this.Uptime != null &&
                    this.Uptime.Equals(input.Uptime))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.Jvm == input.Jvm ||
                    (this.Jvm != null &&
                    this.Jvm.Equals(input.Jvm))
                ) && 
                (
                    this.Args == input.Args ||
                    (this.Args != null &&
                    this.Args.Equals(input.Args))
                ) && 
                (
                    this.Cores == input.Cores ||
                    (this.Cores != null &&
                    this.Cores.Equals(input.Cores))
                ) && 
                (
                    this.FreeMemory == input.FreeMemory ||
                    (this.FreeMemory != null &&
                    this.FreeMemory.Equals(input.FreeMemory))
                ) && 
                (
                    this.TotalMemory == input.TotalMemory ||
                    (this.TotalMemory != null &&
                    this.TotalMemory.Equals(input.TotalMemory))
                ) && 
                (
                    this.Load == input.Load ||
                    (this.Load != null &&
                    this.Load.Equals(input.Load))
                ) && 
                (
                    this.AvailableSeverThreads == input.AvailableSeverThreads ||
                    (this.AvailableSeverThreads != null &&
                    this.AvailableSeverThreads.Equals(input.AvailableSeverThreads))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Uptime != null)
                    hashCode = hashCode * 59 + this.Uptime.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.Jvm != null)
                    hashCode = hashCode * 59 + this.Jvm.GetHashCode();
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                if (this.Cores != null)
                    hashCode = hashCode * 59 + this.Cores.GetHashCode();
                if (this.FreeMemory != null)
                    hashCode = hashCode * 59 + this.FreeMemory.GetHashCode();
                if (this.TotalMemory != null)
                    hashCode = hashCode * 59 + this.TotalMemory.GetHashCode();
                if (this.Load != null)
                    hashCode = hashCode * 59 + this.Load.GetHashCode();
                if (this.AvailableSeverThreads != null)
                    hashCode = hashCode * 59 + this.AvailableSeverThreads.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
