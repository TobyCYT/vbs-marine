/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiJudgementValidatorStatus
    /// </summary>
    [DataContract]
        public partial class ApiJudgementValidatorStatus :  IEquatable<ApiJudgementValidatorStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiJudgementValidatorStatus" /> class.
        /// </summary>
        /// <param name="validatorName">validatorName (required).</param>
        /// <param name="pending">pending (required).</param>
        /// <param name="open">open (required).</param>
        public ApiJudgementValidatorStatus(string validatorName = default(string), int? pending = default(int?), int? open = default(int?))
        {
            // to ensure "validatorName" is required (not null)
            if (validatorName == null)
            {
                throw new InvalidDataException("validatorName is a required property for ApiJudgementValidatorStatus and cannot be null");
            }
            else
            {
                this.ValidatorName = validatorName;
            }
            // to ensure "pending" is required (not null)
            if (pending == null)
            {
                throw new InvalidDataException("pending is a required property for ApiJudgementValidatorStatus and cannot be null");
            }
            else
            {
                this.Pending = pending;
            }
            // to ensure "open" is required (not null)
            if (open == null)
            {
                throw new InvalidDataException("open is a required property for ApiJudgementValidatorStatus and cannot be null");
            }
            else
            {
                this.Open = open;
            }
        }
        
        /// <summary>
        /// Gets or Sets ValidatorName
        /// </summary>
        [DataMember(Name="validatorName", EmitDefaultValue=false)]
        public string ValidatorName { get; set; }

        /// <summary>
        /// Gets or Sets Pending
        /// </summary>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public int? Pending { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public int? Open { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiJudgementValidatorStatus {\n");
            sb.Append("  ValidatorName: ").Append(ValidatorName).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiJudgementValidatorStatus);
        }

        /// <summary>
        /// Returns true if ApiJudgementValidatorStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiJudgementValidatorStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiJudgementValidatorStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidatorName == input.ValidatorName ||
                    (this.ValidatorName != null &&
                    this.ValidatorName.Equals(input.ValidatorName))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidatorName != null)
                    hashCode = hashCode * 59 + this.ValidatorName.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
