/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// RankedAnswer
    /// </summary>
    [DataContract]
        public partial class RankedAnswer :  IEquatable<RankedAnswer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankedAnswer" /> class.
        /// </summary>
        /// <param name="answer">answer (required).</param>
        /// <param name="rank">rank.</param>
        public RankedAnswer(ApiClientAnswer answer = default(ApiClientAnswer), int? rank = default(int?))
        {
            // to ensure "answer" is required (not null)
            if (answer == null)
            {
                throw new InvalidDataException("answer is a required property for RankedAnswer and cannot be null");
            }
            else
            {
                this.Answer = answer;
            }
            this.Rank = rank;
        }
        
        /// <summary>
        /// Gets or Sets Answer
        /// </summary>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public ApiClientAnswer Answer { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RankedAnswer {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RankedAnswer);
        }

        /// <summary>
        /// Returns true if RankedAnswer instances are equal
        /// </summary>
        /// <param name="input">Instance of RankedAnswer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RankedAnswer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
