/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiScoreOverview
    /// </summary>
    [DataContract]
        public partial class ApiScoreOverview :  IEquatable<ApiScoreOverview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiScoreOverview" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="taskGroup">taskGroup.</param>
        /// <param name="scores">scores (required).</param>
        public ApiScoreOverview(string name = default(string), string taskGroup = default(string), List<ApiScore> scores = default(List<ApiScore>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApiScoreOverview and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "scores" is required (not null)
            if (scores == null)
            {
                throw new InvalidDataException("scores is a required property for ApiScoreOverview and cannot be null");
            }
            else
            {
                this.Scores = scores;
            }
            this.TaskGroup = taskGroup;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroup
        /// </summary>
        [DataMember(Name="taskGroup", EmitDefaultValue=false)]
        public string TaskGroup { get; set; }

        /// <summary>
        /// Gets or Sets Scores
        /// </summary>
        [DataMember(Name="scores", EmitDefaultValue=false)]
        public List<ApiScore> Scores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiScoreOverview {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaskGroup: ").Append(TaskGroup).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiScoreOverview);
        }

        /// <summary>
        /// Returns true if ApiScoreOverview instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiScoreOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiScoreOverview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TaskGroup == input.TaskGroup ||
                    (this.TaskGroup != null &&
                    this.TaskGroup.Equals(input.TaskGroup))
                ) && 
                (
                    this.Scores == input.Scores ||
                    this.Scores != null &&
                    input.Scores != null &&
                    this.Scores.SequenceEqual(input.Scores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TaskGroup != null)
                    hashCode = hashCode * 59 + this.TaskGroup.GetHashCode();
                if (this.Scores != null)
                    hashCode = hashCode * 59 + this.Scores.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
