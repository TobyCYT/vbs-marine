/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiRunProperties
    /// </summary>
    [DataContract]
        public partial class ApiRunProperties :  IEquatable<ApiRunProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiRunProperties" /> class.
        /// </summary>
        /// <param name="participantCanView">participantCanView (required).</param>
        /// <param name="shuffleTasks">shuffleTasks (required).</param>
        /// <param name="allowRepeatedTasks">allowRepeatedTasks (required).</param>
        /// <param name="limitSubmissionPreviews">limitSubmissionPreviews (required).</param>
        public ApiRunProperties(bool? participantCanView = default(bool?), bool? shuffleTasks = default(bool?), bool? allowRepeatedTasks = default(bool?), int? limitSubmissionPreviews = default(int?))
        {
            // to ensure "participantCanView" is required (not null)
            if (participantCanView == null)
            {
                throw new InvalidDataException("participantCanView is a required property for ApiRunProperties and cannot be null");
            }
            else
            {
                this.ParticipantCanView = participantCanView;
            }
            // to ensure "shuffleTasks" is required (not null)
            if (shuffleTasks == null)
            {
                throw new InvalidDataException("shuffleTasks is a required property for ApiRunProperties and cannot be null");
            }
            else
            {
                this.ShuffleTasks = shuffleTasks;
            }
            // to ensure "allowRepeatedTasks" is required (not null)
            if (allowRepeatedTasks == null)
            {
                throw new InvalidDataException("allowRepeatedTasks is a required property for ApiRunProperties and cannot be null");
            }
            else
            {
                this.AllowRepeatedTasks = allowRepeatedTasks;
            }
            // to ensure "limitSubmissionPreviews" is required (not null)
            if (limitSubmissionPreviews == null)
            {
                throw new InvalidDataException("limitSubmissionPreviews is a required property for ApiRunProperties and cannot be null");
            }
            else
            {
                this.LimitSubmissionPreviews = limitSubmissionPreviews;
            }
        }
        
        /// <summary>
        /// Gets or Sets ParticipantCanView
        /// </summary>
        [DataMember(Name="participantCanView", EmitDefaultValue=false)]
        public bool? ParticipantCanView { get; set; }

        /// <summary>
        /// Gets or Sets ShuffleTasks
        /// </summary>
        [DataMember(Name="shuffleTasks", EmitDefaultValue=false)]
        public bool? ShuffleTasks { get; set; }

        /// <summary>
        /// Gets or Sets AllowRepeatedTasks
        /// </summary>
        [DataMember(Name="allowRepeatedTasks", EmitDefaultValue=false)]
        public bool? AllowRepeatedTasks { get; set; }

        /// <summary>
        /// Gets or Sets LimitSubmissionPreviews
        /// </summary>
        [DataMember(Name="limitSubmissionPreviews", EmitDefaultValue=false)]
        public int? LimitSubmissionPreviews { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiRunProperties {\n");
            sb.Append("  ParticipantCanView: ").Append(ParticipantCanView).Append("\n");
            sb.Append("  ShuffleTasks: ").Append(ShuffleTasks).Append("\n");
            sb.Append("  AllowRepeatedTasks: ").Append(AllowRepeatedTasks).Append("\n");
            sb.Append("  LimitSubmissionPreviews: ").Append(LimitSubmissionPreviews).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiRunProperties);
        }

        /// <summary>
        /// Returns true if ApiRunProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiRunProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiRunProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParticipantCanView == input.ParticipantCanView ||
                    (this.ParticipantCanView != null &&
                    this.ParticipantCanView.Equals(input.ParticipantCanView))
                ) && 
                (
                    this.ShuffleTasks == input.ShuffleTasks ||
                    (this.ShuffleTasks != null &&
                    this.ShuffleTasks.Equals(input.ShuffleTasks))
                ) && 
                (
                    this.AllowRepeatedTasks == input.AllowRepeatedTasks ||
                    (this.AllowRepeatedTasks != null &&
                    this.AllowRepeatedTasks.Equals(input.AllowRepeatedTasks))
                ) && 
                (
                    this.LimitSubmissionPreviews == input.LimitSubmissionPreviews ||
                    (this.LimitSubmissionPreviews != null &&
                    this.LimitSubmissionPreviews.Equals(input.LimitSubmissionPreviews))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParticipantCanView != null)
                    hashCode = hashCode * 59 + this.ParticipantCanView.GetHashCode();
                if (this.ShuffleTasks != null)
                    hashCode = hashCode * 59 + this.ShuffleTasks.GetHashCode();
                if (this.AllowRepeatedTasks != null)
                    hashCode = hashCode * 59 + this.AllowRepeatedTasks.GetHashCode();
                if (this.LimitSubmissionPreviews != null)
                    hashCode = hashCode * 59 + this.LimitSubmissionPreviews.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
