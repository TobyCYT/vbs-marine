/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiMediaItem
    /// </summary>
    [DataContract]
        public partial class ApiMediaItem :  IEquatable<ApiMediaItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiMediaItem" /> class.
        /// </summary>
        /// <param name="mediaItemId">mediaItemId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="collectionId">collectionId (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="durationMs">durationMs.</param>
        /// <param name="fps">fps.</param>
        /// <param name="metadata">metadata (required).</param>
        public ApiMediaItem(string mediaItemId = default(string), string name = default(string), ApiMediaType type = default(ApiMediaType), string collectionId = default(string), string location = default(string), long? durationMs = default(long?), float? fps = default(float?), List<ApiMediaItemMetaDataEntry> metadata = default(List<ApiMediaItemMetaDataEntry>))
        {
            // to ensure "mediaItemId" is required (not null)
            if (mediaItemId == null)
            {
                throw new InvalidDataException("mediaItemId is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.MediaItemId = mediaItemId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "collectionId" is required (not null)
            if (collectionId == null)
            {
                throw new InvalidDataException("collectionId is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.CollectionId = collectionId;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for ApiMediaItem and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
            this.DurationMs = durationMs;
            this.Fps = fps;
        }
        
        /// <summary>
        /// Gets or Sets MediaItemId
        /// </summary>
        [DataMember(Name="mediaItemId", EmitDefaultValue=false)]
        public string MediaItemId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ApiMediaType Type { get; set; }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>
        [DataMember(Name="collectionId", EmitDefaultValue=false)]
        public string CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets DurationMs
        /// </summary>
        [DataMember(Name="durationMs", EmitDefaultValue=false)]
        public long? DurationMs { get; set; }

        /// <summary>
        /// Gets or Sets Fps
        /// </summary>
        [DataMember(Name="fps", EmitDefaultValue=false)]
        public float? Fps { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<ApiMediaItemMetaDataEntry> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiMediaItem {\n");
            sb.Append("  MediaItemId: ").Append(MediaItemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  DurationMs: ").Append(DurationMs).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiMediaItem);
        }

        /// <summary>
        /// Returns true if ApiMediaItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiMediaItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiMediaItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MediaItemId == input.MediaItemId ||
                    (this.MediaItemId != null &&
                    this.MediaItemId.Equals(input.MediaItemId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CollectionId == input.CollectionId ||
                    (this.CollectionId != null &&
                    this.CollectionId.Equals(input.CollectionId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.DurationMs == input.DurationMs ||
                    (this.DurationMs != null &&
                    this.DurationMs.Equals(input.DurationMs))
                ) && 
                (
                    this.Fps == input.Fps ||
                    (this.Fps != null &&
                    this.Fps.Equals(input.Fps))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaItemId != null)
                    hashCode = hashCode * 59 + this.MediaItemId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CollectionId != null)
                    hashCode = hashCode * 59 + this.CollectionId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.DurationMs != null)
                    hashCode = hashCode * 59 + this.DurationMs.GetHashCode();
                if (this.Fps != null)
                    hashCode = hashCode * 59 + this.Fps.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
