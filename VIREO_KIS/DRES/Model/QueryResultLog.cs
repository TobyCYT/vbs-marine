/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// QueryResultLog
    /// </summary>
    [DataContract]
        public partial class QueryResultLog :  IEquatable<QueryResultLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResultLog" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="sortType">sortType (required).</param>
        /// <param name="resultSetAvailability">resultSetAvailability (required).</param>
        /// <param name="results">results (required).</param>
        /// <param name="events">events (required).</param>
        public QueryResultLog(long? timestamp = default(long?), string sortType = default(string), string resultSetAvailability = default(string), List<RankedAnswer> results = default(List<RankedAnswer>), List<QueryEvent> events = default(List<QueryEvent>))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for QueryResultLog and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "sortType" is required (not null)
            if (sortType == null)
            {
                throw new InvalidDataException("sortType is a required property for QueryResultLog and cannot be null");
            }
            else
            {
                this.SortType = sortType;
            }
            // to ensure "resultSetAvailability" is required (not null)
            if (resultSetAvailability == null)
            {
                throw new InvalidDataException("resultSetAvailability is a required property for QueryResultLog and cannot be null");
            }
            else
            {
                this.ResultSetAvailability = resultSetAvailability;
            }
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new InvalidDataException("results is a required property for QueryResultLog and cannot be null");
            }
            else
            {
                this.Results = results;
            }
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new InvalidDataException("events is a required property for QueryResultLog and cannot be null");
            }
            else
            {
                this.Events = events;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SortType
        /// </summary>
        [DataMember(Name="sortType", EmitDefaultValue=false)]
        public string SortType { get; set; }

        /// <summary>
        /// Gets or Sets ResultSetAvailability
        /// </summary>
        [DataMember(Name="resultSetAvailability", EmitDefaultValue=false)]
        public string ResultSetAvailability { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<RankedAnswer> Results { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<QueryEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryResultLog {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SortType: ").Append(SortType).Append("\n");
            sb.Append("  ResultSetAvailability: ").Append(ResultSetAvailability).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryResultLog);
        }

        /// <summary>
        /// Returns true if QueryResultLog instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryResultLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryResultLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.SortType == input.SortType ||
                    (this.SortType != null &&
                    this.SortType.Equals(input.SortType))
                ) && 
                (
                    this.ResultSetAvailability == input.ResultSetAvailability ||
                    (this.ResultSetAvailability != null &&
                    this.ResultSetAvailability.Equals(input.ResultSetAvailability))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.SortType != null)
                    hashCode = hashCode * 59 + this.SortType.GetHashCode();
                if (this.ResultSetAvailability != null)
                    hashCode = hashCode * 59 + this.ResultSetAvailability.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
