/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiEvaluationTemplate
    /// </summary>
    [DataContract]
        public partial class ApiEvaluationTemplate :  IEquatable<ApiEvaluationTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiEvaluationTemplate" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="created">created.</param>
        /// <param name="modified">modified.</param>
        /// <param name="taskTypes">taskTypes (required).</param>
        /// <param name="taskGroups">taskGroups (required).</param>
        /// <param name="tasks">tasks (required).</param>
        /// <param name="teams">teams (required).</param>
        /// <param name="teamGroups">teamGroups (required).</param>
        /// <param name="judges">judges (required).</param>
        public ApiEvaluationTemplate(string id = default(string), string name = default(string), string description = default(string), long? created = default(long?), long? modified = default(long?), List<ApiTaskType> taskTypes = default(List<ApiTaskType>), List<ApiTaskGroup> taskGroups = default(List<ApiTaskGroup>), List<ApiTaskTemplate> tasks = default(List<ApiTaskTemplate>), List<ApiTeam> teams = default(List<ApiTeam>), List<ApiTeamGroup> teamGroups = default(List<ApiTeamGroup>), List<string> judges = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "taskTypes" is required (not null)
            if (taskTypes == null)
            {
                throw new InvalidDataException("taskTypes is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.TaskTypes = taskTypes;
            }
            // to ensure "taskGroups" is required (not null)
            if (taskGroups == null)
            {
                throw new InvalidDataException("taskGroups is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.TaskGroups = taskGroups;
            }
            // to ensure "tasks" is required (not null)
            if (tasks == null)
            {
                throw new InvalidDataException("tasks is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.Tasks = tasks;
            }
            // to ensure "teams" is required (not null)
            if (teams == null)
            {
                throw new InvalidDataException("teams is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.Teams = teams;
            }
            // to ensure "teamGroups" is required (not null)
            if (teamGroups == null)
            {
                throw new InvalidDataException("teamGroups is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.TeamGroups = teamGroups;
            }
            // to ensure "judges" is required (not null)
            if (judges == null)
            {
                throw new InvalidDataException("judges is a required property for ApiEvaluationTemplate and cannot be null");
            }
            else
            {
                this.Judges = judges;
            }
            this.Description = description;
            this.Created = created;
            this.Modified = modified;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public long? Created { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public long? Modified { get; set; }

        /// <summary>
        /// Gets or Sets TaskTypes
        /// </summary>
        [DataMember(Name="taskTypes", EmitDefaultValue=false)]
        public List<ApiTaskType> TaskTypes { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroups
        /// </summary>
        [DataMember(Name="taskGroups", EmitDefaultValue=false)]
        public List<ApiTaskGroup> TaskGroups { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<ApiTaskTemplate> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<ApiTeam> Teams { get; set; }

        /// <summary>
        /// Gets or Sets TeamGroups
        /// </summary>
        [DataMember(Name="teamGroups", EmitDefaultValue=false)]
        public List<ApiTeamGroup> TeamGroups { get; set; }

        /// <summary>
        /// Gets or Sets Judges
        /// </summary>
        [DataMember(Name="judges", EmitDefaultValue=false)]
        public List<string> Judges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiEvaluationTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  TaskTypes: ").Append(TaskTypes).Append("\n");
            sb.Append("  TaskGroups: ").Append(TaskGroups).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  TeamGroups: ").Append(TeamGroups).Append("\n");
            sb.Append("  Judges: ").Append(Judges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiEvaluationTemplate);
        }

        /// <summary>
        /// Returns true if ApiEvaluationTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiEvaluationTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiEvaluationTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.TaskTypes == input.TaskTypes ||
                    this.TaskTypes != null &&
                    input.TaskTypes != null &&
                    this.TaskTypes.SequenceEqual(input.TaskTypes)
                ) && 
                (
                    this.TaskGroups == input.TaskGroups ||
                    this.TaskGroups != null &&
                    input.TaskGroups != null &&
                    this.TaskGroups.SequenceEqual(input.TaskGroups)
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    input.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.Teams == input.Teams ||
                    this.Teams != null &&
                    input.Teams != null &&
                    this.Teams.SequenceEqual(input.Teams)
                ) && 
                (
                    this.TeamGroups == input.TeamGroups ||
                    this.TeamGroups != null &&
                    input.TeamGroups != null &&
                    this.TeamGroups.SequenceEqual(input.TeamGroups)
                ) && 
                (
                    this.Judges == input.Judges ||
                    this.Judges != null &&
                    input.Judges != null &&
                    this.Judges.SequenceEqual(input.Judges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.TaskTypes != null)
                    hashCode = hashCode * 59 + this.TaskTypes.GetHashCode();
                if (this.TaskGroups != null)
                    hashCode = hashCode * 59 + this.TaskGroups.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                if (this.TeamGroups != null)
                    hashCode = hashCode * 59 + this.TeamGroups.GetHashCode();
                if (this.Judges != null)
                    hashCode = hashCode * 59 + this.Judges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
