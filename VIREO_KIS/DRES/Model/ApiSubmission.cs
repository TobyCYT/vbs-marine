/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiSubmission
    /// </summary>
    [DataContract]
        public partial class ApiSubmission :  IEquatable<ApiSubmission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSubmission" /> class.
        /// </summary>
        /// <param name="submissionId">submissionId (required).</param>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="memberId">memberId (required).</param>
        /// <param name="teamName">teamName (required).</param>
        /// <param name="memberName">memberName (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="answers">answers (required).</param>
        public ApiSubmission(string submissionId = default(string), string teamId = default(string), string memberId = default(string), string teamName = default(string), string memberName = default(string), long? timestamp = default(long?), List<ApiAnswerSet> answers = default(List<ApiAnswerSet>))
        {
            // to ensure "submissionId" is required (not null)
            if (submissionId == null)
            {
                throw new InvalidDataException("submissionId is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.SubmissionId = submissionId;
            }
            // to ensure "teamId" is required (not null)
            if (teamId == null)
            {
                throw new InvalidDataException("teamId is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.TeamId = teamId;
            }
            // to ensure "memberId" is required (not null)
            if (memberId == null)
            {
                throw new InvalidDataException("memberId is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.MemberId = memberId;
            }
            // to ensure "teamName" is required (not null)
            if (teamName == null)
            {
                throw new InvalidDataException("teamName is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.TeamName = teamName;
            }
            // to ensure "memberName" is required (not null)
            if (memberName == null)
            {
                throw new InvalidDataException("memberName is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.MemberName = memberName;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "answers" is required (not null)
            if (answers == null)
            {
                throw new InvalidDataException("answers is a required property for ApiSubmission and cannot be null");
            }
            else
            {
                this.Answers = answers;
            }
        }
        
        /// <summary>
        /// Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name="submissionId", EmitDefaultValue=false)]
        public string SubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="memberId", EmitDefaultValue=false)]
        public string MemberId { get; set; }

        /// <summary>
        /// Gets or Sets TeamName
        /// </summary>
        [DataMember(Name="teamName", EmitDefaultValue=false)]
        public string TeamName { get; set; }

        /// <summary>
        /// Gets or Sets MemberName
        /// </summary>
        [DataMember(Name="memberName", EmitDefaultValue=false)]
        public string MemberName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name="answers", EmitDefaultValue=false)]
        public List<ApiAnswerSet> Answers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiSubmission {\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiSubmission);
        }

        /// <summary>
        /// Returns true if ApiSubmission instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiSubmission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiSubmission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubmissionId == input.SubmissionId ||
                    (this.SubmissionId != null &&
                    this.SubmissionId.Equals(input.SubmissionId))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.TeamName == input.TeamName ||
                    (this.TeamName != null &&
                    this.TeamName.Equals(input.TeamName))
                ) && 
                (
                    this.MemberName == input.MemberName ||
                    (this.MemberName != null &&
                    this.MemberName.Equals(input.MemberName))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Answers == input.Answers ||
                    this.Answers != null &&
                    input.Answers != null &&
                    this.Answers.SequenceEqual(input.Answers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubmissionId != null)
                    hashCode = hashCode * 59 + this.SubmissionId.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.TeamName != null)
                    hashCode = hashCode * 59 + this.TeamName.GetHashCode();
                if (this.MemberName != null)
                    hashCode = hashCode * 59 + this.MemberName.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Answers != null)
                    hashCode = hashCode * 59 + this.Answers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
