/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiJudgementRequest
    /// </summary>
    [DataContract]
        public partial class ApiJudgementRequest :  IEquatable<ApiJudgementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiJudgementRequest" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="validator">validator (required).</param>
        /// <param name="taskDescription">taskDescription (required).</param>
        /// <param name="answerSet">answerSet (required).</param>
        public ApiJudgementRequest(string token = default(string), string validator = default(string), string taskDescription = default(string), ApiAnswerSet answerSet = default(ApiAnswerSet))
        {
            // to ensure "validator" is required (not null)
            if (validator == null)
            {
                throw new InvalidDataException("validator is a required property for ApiJudgementRequest and cannot be null");
            }
            else
            {
                this.Validator = validator;
            }
            // to ensure "taskDescription" is required (not null)
            if (taskDescription == null)
            {
                throw new InvalidDataException("taskDescription is a required property for ApiJudgementRequest and cannot be null");
            }
            else
            {
                this.TaskDescription = taskDescription;
            }
            // to ensure "answerSet" is required (not null)
            if (answerSet == null)
            {
                throw new InvalidDataException("answerSet is a required property for ApiJudgementRequest and cannot be null");
            }
            else
            {
                this.AnswerSet = answerSet;
            }
            this.Token = token;
        }
        
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Validator
        /// </summary>
        [DataMember(Name="validator", EmitDefaultValue=false)]
        public string Validator { get; set; }

        /// <summary>
        /// Gets or Sets TaskDescription
        /// </summary>
        [DataMember(Name="taskDescription", EmitDefaultValue=false)]
        public string TaskDescription { get; set; }

        /// <summary>
        /// Gets or Sets AnswerSet
        /// </summary>
        [DataMember(Name="answerSet", EmitDefaultValue=false)]
        public ApiAnswerSet AnswerSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiJudgementRequest {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Validator: ").Append(Validator).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  AnswerSet: ").Append(AnswerSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiJudgementRequest);
        }

        /// <summary>
        /// Returns true if ApiJudgementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiJudgementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiJudgementRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Validator == input.Validator ||
                    (this.Validator != null &&
                    this.Validator.Equals(input.Validator))
                ) && 
                (
                    this.TaskDescription == input.TaskDescription ||
                    (this.TaskDescription != null &&
                    this.TaskDescription.Equals(input.TaskDescription))
                ) && 
                (
                    this.AnswerSet == input.AnswerSet ||
                    (this.AnswerSet != null &&
                    this.AnswerSet.Equals(input.AnswerSet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Validator != null)
                    hashCode = hashCode * 59 + this.Validator.GetHashCode();
                if (this.TaskDescription != null)
                    hashCode = hashCode * 59 + this.TaskDescription.GetHashCode();
                if (this.AnswerSet != null)
                    hashCode = hashCode * 59 + this.AnswerSet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
