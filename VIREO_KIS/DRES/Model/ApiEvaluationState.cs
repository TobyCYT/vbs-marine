/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiEvaluationState
    /// </summary>
    [DataContract]
        public partial class ApiEvaluationState :  IEquatable<ApiEvaluationState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiEvaluationState" /> class.
        /// </summary>
        /// <param name="evaluationId">evaluationId (required).</param>
        /// <param name="evaluationStatus">evaluationStatus (required).</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="taskStatus">taskStatus (required).</param>
        /// <param name="taskTemplateId">taskTemplateId.</param>
        /// <param name="timeLeft">timeLeft (required).</param>
        /// <param name="timeElapsed">timeElapsed (required).</param>
        public ApiEvaluationState(string evaluationId = default(string), ApiEvaluationStatus evaluationStatus = default(ApiEvaluationStatus), string taskId = default(string), ApiTaskStatus taskStatus = default(ApiTaskStatus), string taskTemplateId = default(string), long? timeLeft = default(long?), long? timeElapsed = default(long?))
        {
            // to ensure "evaluationId" is required (not null)
            if (evaluationId == null)
            {
                throw new InvalidDataException("evaluationId is a required property for ApiEvaluationState and cannot be null");
            }
            else
            {
                this.EvaluationId = evaluationId;
            }
            // to ensure "evaluationStatus" is required (not null)
            if (evaluationStatus == null)
            {
                throw new InvalidDataException("evaluationStatus is a required property for ApiEvaluationState and cannot be null");
            }
            else
            {
                this.EvaluationStatus = evaluationStatus;
            }
            // to ensure "taskStatus" is required (not null)
            if (taskStatus == null)
            {
                throw new InvalidDataException("taskStatus is a required property for ApiEvaluationState and cannot be null");
            }
            else
            {
                this.TaskStatus = taskStatus;
            }
            // to ensure "timeLeft" is required (not null)
            if (timeLeft == null)
            {
                throw new InvalidDataException("timeLeft is a required property for ApiEvaluationState and cannot be null");
            }
            else
            {
                this.TimeLeft = timeLeft;
            }
            // to ensure "timeElapsed" is required (not null)
            if (timeElapsed == null)
            {
                throw new InvalidDataException("timeElapsed is a required property for ApiEvaluationState and cannot be null");
            }
            else
            {
                this.TimeElapsed = timeElapsed;
            }
            this.TaskId = taskId;
            this.TaskTemplateId = taskTemplateId;
        }
        
        /// <summary>
        /// Gets or Sets EvaluationId
        /// </summary>
        [DataMember(Name="evaluationId", EmitDefaultValue=false)]
        public string EvaluationId { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationStatus
        /// </summary>
        [DataMember(Name="evaluationStatus", EmitDefaultValue=false)]
        public ApiEvaluationStatus EvaluationStatus { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskStatus
        /// </summary>
        [DataMember(Name="taskStatus", EmitDefaultValue=false)]
        public ApiTaskStatus TaskStatus { get; set; }

        /// <summary>
        /// Gets or Sets TaskTemplateId
        /// </summary>
        [DataMember(Name="taskTemplateId", EmitDefaultValue=false)]
        public string TaskTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TimeLeft
        /// </summary>
        [DataMember(Name="timeLeft", EmitDefaultValue=false)]
        public long? TimeLeft { get; set; }

        /// <summary>
        /// Gets or Sets TimeElapsed
        /// </summary>
        [DataMember(Name="timeElapsed", EmitDefaultValue=false)]
        public long? TimeElapsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiEvaluationState {\n");
            sb.Append("  EvaluationId: ").Append(EvaluationId).Append("\n");
            sb.Append("  EvaluationStatus: ").Append(EvaluationStatus).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskStatus: ").Append(TaskStatus).Append("\n");
            sb.Append("  TaskTemplateId: ").Append(TaskTemplateId).Append("\n");
            sb.Append("  TimeLeft: ").Append(TimeLeft).Append("\n");
            sb.Append("  TimeElapsed: ").Append(TimeElapsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiEvaluationState);
        }

        /// <summary>
        /// Returns true if ApiEvaluationState instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiEvaluationState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiEvaluationState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EvaluationId == input.EvaluationId ||
                    (this.EvaluationId != null &&
                    this.EvaluationId.Equals(input.EvaluationId))
                ) && 
                (
                    this.EvaluationStatus == input.EvaluationStatus ||
                    (this.EvaluationStatus != null &&
                    this.EvaluationStatus.Equals(input.EvaluationStatus))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskStatus == input.TaskStatus ||
                    (this.TaskStatus != null &&
                    this.TaskStatus.Equals(input.TaskStatus))
                ) && 
                (
                    this.TaskTemplateId == input.TaskTemplateId ||
                    (this.TaskTemplateId != null &&
                    this.TaskTemplateId.Equals(input.TaskTemplateId))
                ) && 
                (
                    this.TimeLeft == input.TimeLeft ||
                    (this.TimeLeft != null &&
                    this.TimeLeft.Equals(input.TimeLeft))
                ) && 
                (
                    this.TimeElapsed == input.TimeElapsed ||
                    (this.TimeElapsed != null &&
                    this.TimeElapsed.Equals(input.TimeElapsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EvaluationId != null)
                    hashCode = hashCode * 59 + this.EvaluationId.GetHashCode();
                if (this.EvaluationStatus != null)
                    hashCode = hashCode * 59 + this.EvaluationStatus.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskStatus != null)
                    hashCode = hashCode * 59 + this.TaskStatus.GetHashCode();
                if (this.TaskTemplateId != null)
                    hashCode = hashCode * 59 + this.TaskTemplateId.GetHashCode();
                if (this.TimeLeft != null)
                    hashCode = hashCode * 59 + this.TimeLeft.GetHashCode();
                if (this.TimeElapsed != null)
                    hashCode = hashCode * 59 + this.TimeElapsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
