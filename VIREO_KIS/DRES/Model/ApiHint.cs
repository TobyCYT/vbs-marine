/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiHint
    /// </summary>
    [DataContract]
        public partial class ApiHint :  IEquatable<ApiHint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiHint" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="description">description.</param>
        /// <param name="path">path.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="mediaItem">mediaItem.</param>
        /// <param name="mediaItemName">mediaItemName.</param>
        /// <param name="range">range.</param>
        public ApiHint(ApiHintType type = default(ApiHintType), long? start = default(long?), long? end = default(long?), string description = default(string), string path = default(string), string dataType = default(string), string mediaItem = default(string), string mediaItemName = default(string), ApiTemporalRange range = default(ApiTemporalRange))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ApiHint and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Start = start;
            this.End = end;
            this.Description = description;
            this.Path = path;
            this.DataType = dataType;
            this.MediaItem = mediaItem;
            this.MediaItemName = mediaItemName;
            this.Range = range;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ApiHintType Type { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public long? Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public long? End { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or Sets MediaItem
        /// </summary>
        [DataMember(Name="mediaItem", EmitDefaultValue=false)]
        public string MediaItem { get; set; }

        /// <summary>
        /// Gets or Sets MediaItemName
        /// </summary>
        [DataMember(Name="mediaItemName", EmitDefaultValue=false)]
        public string MediaItemName { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public ApiTemporalRange Range { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiHint {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  MediaItem: ").Append(MediaItem).Append("\n");
            sb.Append("  MediaItemName: ").Append(MediaItemName).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiHint);
        }

        /// <summary>
        /// Returns true if ApiHint instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiHint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiHint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.MediaItem == input.MediaItem ||
                    (this.MediaItem != null &&
                    this.MediaItem.Equals(input.MediaItem))
                ) && 
                (
                    this.MediaItemName == input.MediaItemName ||
                    (this.MediaItemName != null &&
                    this.MediaItemName.Equals(input.MediaItemName))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.MediaItem != null)
                    hashCode = hashCode * 59 + this.MediaItem.GetHashCode();
                if (this.MediaItemName != null)
                    hashCode = hashCode * 59 + this.MediaItemName.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
