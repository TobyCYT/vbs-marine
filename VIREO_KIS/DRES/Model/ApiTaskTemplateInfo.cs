/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiTaskTemplateInfo
    /// </summary>
    [DataContract]
        public partial class ApiTaskTemplateInfo :  IEquatable<ApiTaskTemplateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTaskTemplateInfo" /> class.
        /// </summary>
        /// <param name="templateId">templateId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="comment">comment.</param>
        /// <param name="taskGroup">taskGroup (required).</param>
        /// <param name="taskType">taskType (required).</param>
        /// <param name="duration">duration (required).</param>
        public ApiTaskTemplateInfo(string templateId = default(string), string name = default(string), string comment = default(string), string taskGroup = default(string), string taskType = default(string), long? duration = default(long?))
        {
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new InvalidDataException("templateId is a required property for ApiTaskTemplateInfo and cannot be null");
            }
            else
            {
                this.TemplateId = templateId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApiTaskTemplateInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "taskGroup" is required (not null)
            if (taskGroup == null)
            {
                throw new InvalidDataException("taskGroup is a required property for ApiTaskTemplateInfo and cannot be null");
            }
            else
            {
                this.TaskGroup = taskGroup;
            }
            // to ensure "taskType" is required (not null)
            if (taskType == null)
            {
                throw new InvalidDataException("taskType is a required property for ApiTaskTemplateInfo and cannot be null");
            }
            else
            {
                this.TaskType = taskType;
            }
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for ApiTaskTemplateInfo and cannot be null");
            }
            else
            {
                this.Duration = duration;
            }
            this.Comment = comment;
        }
        
        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroup
        /// </summary>
        [DataMember(Name="taskGroup", EmitDefaultValue=false)]
        public string TaskGroup { get; set; }

        /// <summary>
        /// Gets or Sets TaskType
        /// </summary>
        [DataMember(Name="taskType", EmitDefaultValue=false)]
        public string TaskType { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTaskTemplateInfo {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  TaskGroup: ").Append(TaskGroup).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTaskTemplateInfo);
        }

        /// <summary>
        /// Returns true if ApiTaskTemplateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTaskTemplateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTaskTemplateInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.TaskGroup == input.TaskGroup ||
                    (this.TaskGroup != null &&
                    this.TaskGroup.Equals(input.TaskGroup))
                ) && 
                (
                    this.TaskType == input.TaskType ||
                    (this.TaskType != null &&
                    this.TaskType.Equals(input.TaskType))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.TaskGroup != null)
                    hashCode = hashCode * 59 + this.TaskGroup.GetHashCode();
                if (this.TaskType != null)
                    hashCode = hashCode * 59 + this.TaskType.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
