/* 
 * DRES Client API
 *
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * OpenAPI spec version: 2.0.0-RC4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISubmissionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Endpoint to accept submissions
        /// </summary>
        /// <remarks>
        /// This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>SuccessfulSubmissionsStatus</returns>
        SuccessfulSubmissionsStatus GetApiV1Submit (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null);

        /// <summary>
        /// Endpoint to accept submissions
        /// </summary>
        /// <remarks>
        /// This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>ApiResponse of SuccessfulSubmissionsStatus</returns>
        ApiResponse<SuccessfulSubmissionsStatus> GetApiV1SubmitWithHttpInfo (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null);
        /// <summary>
        /// Endpoint to accept submissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>SuccessfulSubmissionsStatus</returns>
        SuccessfulSubmissionsStatus PostApiV2SubmitByEvaluationId (ApiClientSubmission body, string evaluationId, string session = null);

        /// <summary>
        /// Endpoint to accept submissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>ApiResponse of SuccessfulSubmissionsStatus</returns>
        ApiResponse<SuccessfulSubmissionsStatus> PostApiV2SubmitByEvaluationIdWithHttpInfo (ApiClientSubmission body, string evaluationId, string session = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Endpoint to accept submissions
        /// </summary>
        /// <remarks>
        /// This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of SuccessfulSubmissionsStatus</returns>
        System.Threading.Tasks.Task<SuccessfulSubmissionsStatus> GetApiV1SubmitAsync (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null);

        /// <summary>
        /// Endpoint to accept submissions
        /// </summary>
        /// <remarks>
        /// This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessfulSubmissionsStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessfulSubmissionsStatus>> GetApiV1SubmitAsyncWithHttpInfo (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null);
        /// <summary>
        /// Endpoint to accept submissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of SuccessfulSubmissionsStatus</returns>
        System.Threading.Tasks.Task<SuccessfulSubmissionsStatus> PostApiV2SubmitByEvaluationIdAsync (ApiClientSubmission body, string evaluationId, string session = null);

        /// <summary>
        /// Endpoint to accept submissions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessfulSubmissionsStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessfulSubmissionsStatus>> PostApiV2SubmitByEvaluationIdAsyncWithHttpInfo (ApiClientSubmission body, string evaluationId, string session = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SubmissionApi : ISubmissionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubmissionApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubmissionApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubmissionApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Endpoint to accept submissions This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>SuccessfulSubmissionsStatus</returns>
        public SuccessfulSubmissionsStatus GetApiV1Submit (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null)
        {
             ApiResponse<SuccessfulSubmissionsStatus> localVarResponse = GetApiV1SubmitWithHttpInfo(collection, item, text, frame, shot, timecode, session);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to accept submissions This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>ApiResponse of SuccessfulSubmissionsStatus</returns>
        public ApiResponse< SuccessfulSubmissionsStatus > GetApiV1SubmitWithHttpInfo (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null)
        {

            var localVarPath = "/api/v1/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (item != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item", item)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (frame != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "frame", frame)); // query parameter
            if (shot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shot", shot)); // query parameter
            if (timecode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timecode", timecode)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiV1Submit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulSubmissionsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessfulSubmissionsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulSubmissionsStatus)));
        }

        /// <summary>
        /// Endpoint to accept submissions This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of SuccessfulSubmissionsStatus</returns>
        public async System.Threading.Tasks.Task<SuccessfulSubmissionsStatus> GetApiV1SubmitAsync (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null)
        {
             ApiResponse<SuccessfulSubmissionsStatus> localVarResponse = await GetApiV1SubmitAsyncWithHttpInfo(collection, item, text, frame, shot, timecode, session);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Endpoint to accept submissions This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collection">Collection identifier. Optional, in which case the default collection for the run will be considered. (optional)</param>
        /// <param name="item">Identifier for the actual media object or media file. (optional)</param>
        /// <param name="text">Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers. (optional)</param>
        /// <param name="frame">Frame number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="shot">Shot number for media with temporal progression (e.g., video). (optional)</param>
        /// <param name="timecode">Timecode for media with temporal progression (e.g,. video). (optional)</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessfulSubmissionsStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessfulSubmissionsStatus>> GetApiV1SubmitAsyncWithHttpInfo (string collection = null, string item = null, string text = null, int? frame = null, int? shot = null, string timecode = null, string session = null)
        {

            var localVarPath = "/api/v1/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collection", collection)); // query parameter
            if (item != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item", item)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (frame != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "frame", frame)); // query parameter
            if (shot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shot", shot)); // query parameter
            if (timecode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timecode", timecode)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiV1Submit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulSubmissionsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessfulSubmissionsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulSubmissionsStatus)));
        }

        /// <summary>
        /// Endpoint to accept submissions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>SuccessfulSubmissionsStatus</returns>
        public SuccessfulSubmissionsStatus PostApiV2SubmitByEvaluationId (ApiClientSubmission body, string evaluationId, string session = null)
        {
             ApiResponse<SuccessfulSubmissionsStatus> localVarResponse = PostApiV2SubmitByEvaluationIdWithHttpInfo(body, evaluationId, session);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to accept submissions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>ApiResponse of SuccessfulSubmissionsStatus</returns>
        public ApiResponse< SuccessfulSubmissionsStatus > PostApiV2SubmitByEvaluationIdWithHttpInfo (ApiClientSubmission body, string evaluationId, string session = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmissionApi->PostApiV2SubmitByEvaluationId");
            // verify the required parameter 'evaluationId' is set
            if (evaluationId == null)
                throw new ApiException(400, "Missing required parameter 'evaluationId' when calling SubmissionApi->PostApiV2SubmitByEvaluationId");

            var localVarPath = "/api/v2/submit/{evaluationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evaluationId != null) localVarPathParams.Add("evaluationId", this.Configuration.ApiClient.ParameterToString(evaluationId)); // path parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostApiV2SubmitByEvaluationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulSubmissionsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessfulSubmissionsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulSubmissionsStatus)));
        }

        /// <summary>
        /// Endpoint to accept submissions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of SuccessfulSubmissionsStatus</returns>
        public async System.Threading.Tasks.Task<SuccessfulSubmissionsStatus> PostApiV2SubmitByEvaluationIdAsync (ApiClientSubmission body, string evaluationId, string session = null)
        {
             ApiResponse<SuccessfulSubmissionsStatus> localVarResponse = await PostApiV2SubmitByEvaluationIdAsyncWithHttpInfo(body, evaluationId, session);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Endpoint to accept submissions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="evaluationId">The ID of the evaluation the submission belongs to.</param>
        /// <param name="session">Session Token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessfulSubmissionsStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessfulSubmissionsStatus>> PostApiV2SubmitByEvaluationIdAsyncWithHttpInfo (ApiClientSubmission body, string evaluationId, string session = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmissionApi->PostApiV2SubmitByEvaluationId");
            // verify the required parameter 'evaluationId' is set
            if (evaluationId == null)
                throw new ApiException(400, "Missing required parameter 'evaluationId' when calling SubmissionApi->PostApiV2SubmitByEvaluationId");

            var localVarPath = "/api/v2/submit/{evaluationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (evaluationId != null) localVarPathParams.Add("evaluationId", this.Configuration.ApiClient.ParameterToString(evaluationId)); // path parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostApiV2SubmitByEvaluationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulSubmissionsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessfulSubmissionsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulSubmissionsStatus)));
        }

    }
}
